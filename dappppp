pragma solidity ^0.5.12;



contract NewToken{
    string public name;
    string public symbol;
    uint256 public totalSupply;
    uint256 public decimals=8;
    
    mapping(address=> uint256) balances;
    mapping(address=>mapping(address=>uint256)) public allowances;

        event Transfer(
        address indexed _from,
        address indexed _to,
        uint256 _value
        );
        
        event Approval(
        address indexed _owner,
        address  indexed _spender,
        uint256 _value
        );

    constructor(uint256 initial_supply) public {
        name="New Token";
        symbol="NewT";
        totalSupply=initial_supply*10**decimals;
        balances[msg.sender]=totalSupply;
    }
    
     function approve(address _spender, uint256 _value) public returns( bool){
        allowances[msg.sender][_spender]=_value;
        emit Approval(msg.sender, _spender,_value);
        return true;
    }
   
    function transfer(address payable _to, uint256 _value) public payable returns(bool status){
       require(balances[msg.sender]>=_value);
       balances[msg.sender]-=_value;
       balances[_to]+=_value;
       emit Transfer(msg.sender, _to, _value);
       return true;
       
    }
     function transferFrom(address payable _from , address payable _to, uint256 _value) public payable returns ( bool status){
    require(balances[_from]>=_value );
    require(_value<=allowances[_from][msg.sender]);
    balances[_from]-=_value;
    balances[_to]+=_value;
    allowances[_from][msg.sender]-=_value;
    emit Transfer(_from, _to,_value);
    return true;
    
    }
    
    function balanceOf(address  _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }
   
    
   
    
    
    
    
    
    
    
}
